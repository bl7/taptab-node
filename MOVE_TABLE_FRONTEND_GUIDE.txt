===========================================
MOVE TABLE API - FRONTEND INTEGRATION GUIDE
===========================================

✅ UPDATED: Response structure fixed to match frontend expectations!

Date: January 2025
Status: ✅ FULLY WORKING - Response structure corrected
Backend Status: ✅ COMPLETELY FIXED

===========================================
API ENDPOINT DETAILS
===========================================

**Endpoint:** `PUT /api/v1/orders/:orderId/move-table`

**Authentication:** Required (JWT Bearer token)
**Roles:** WAITER, CASHIER, KITCHEN, MANAGER, TENANT_ADMIN

===========================================
REQUEST FORMAT
===========================================

```typescript
// Request
const moveOrder = async (orderId: string, tableId: string) => {
  const response = await fetch(`/api/v1/orders/${orderId}/move-table`, {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ tableId })
  });
  return response.json();
};
```

**Request Body:**
```json
{
  "tableId": "table_1754760929456_duftr"
}
```

===========================================
RESPONSE STRUCTURE (UPDATED)
===========================================

**Success Response (200):**
```json
{
  "success": true,
  "data": {
    "order": {
      "id": "order_1755171040869_lyw93",
      "orderNumber": "ORD-1755171040869-rsw43",
      "status": "active",
      "paymentStatus": "pending",
      "paymentMethod": null,
      "customerName": "Walk-in Customer",
      "totalAmount": 20,
      "finalAmount": 20,
      "tableNumber": "table_1754760929456_duftr",
      "createdAt": "2025-08-14T11:30:40.869Z",
      "updatedAt": "2025-08-14T11:37:49.699Z"
    },
    "fromTable": "table_1754127535768_loqut",
    "toTable": "table_1754760929456_duftr",
    "movedBy": "madridistabiswash@gmail.com",
    "movedAt": "2025-08-14T11:37:49.934Z"
  },
  "timestamp": "2025-08-14T11:37:49.934Z",
  "message": "Order moved successfully"
}
```

**Key Properties for Frontend:**
- ✅ `data.fromTable` - The table the order was moved FROM
- ✅ `data.toTable` - The table the order was moved TO
- ✅ `data.order.tableNumber` - Updated table number in order object
- ✅ `data.movedBy` - User who performed the move
- ✅ `data.movedAt` - Timestamp of the move

===========================================
ERROR RESPONSES
===========================================

**400 - Order Not Active:**
```json
{
  "success": false,
  "error": {
    "code": "ORDER_NOT_ACTIVE",
    "message": "Only active orders can be moved"
  },
  "timestamp": "2025-08-14T11:34:53.925Z"
}
```

**400 - Order Already at Table:**
```json
{
  "success": false,
  "error": {
    "code": "ORDER_ALREADY_AT_TABLE",
    "message": "Order is already at the specified table"
  }
}
```

**404 - Order Not Found:**
```json
{
  "success": false,
  "error": {
    "code": "ORDER_NOT_FOUND",
    "message": "Order not found"
  }
}
```

**404 - Table Not Found:**
```json
{
  "success": false,
  "error": {
    "code": "TABLE_NOT_FOUND",
    "message": "Target table not found or inactive"
  }
}
```

**400 - Validation Error:**
```json
{
  "success": false,
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Table ID is required"
  }
}
```

===========================================
FRONTEND IMPLEMENTATION
===========================================

**1. Move Order Function:**
```typescript
const moveOrderToTable = async (orderId: string, targetTableId: string) => {
  try {
    const response = await fetch(`/api/v1/orders/${orderId}/move-table`, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ tableId: targetTableId })
    });

    const result = await response.json();

    if (result.success) {
      // ✅ Success - Update UI
      const { order, fromTable, toTable, movedBy, movedAt } = result.data;
      
      // Update order in your state
      updateOrderInState(order);
      
      // Show success message
      showNotification(`Order moved from ${fromTable} to ${toTable}`, 'success');
      
      // Update table statuses
      updateTableStatus(fromTable, 'available');
      updateTableStatus(toTable, 'occupied');
      
      return result.data;
    } else {
      // ❌ Error - Show error message
      showNotification(result.error.message, 'error');
      throw new Error(result.error.message);
    }
  } catch (error) {
    console.error('Move order error:', error);
    showNotification('Failed to move order', 'error');
    throw error;
  }
};
```

**2. Handle Response Data:**
```typescript
// Access the moved order data
const handleMoveSuccess = (responseData) => {
  const { order, fromTable, toTable, movedBy, movedAt } = responseData;
  
  // Update order details
  setCurrentOrder(order);
  
  // Update table information
  setCurrentTable(order.tableNumber);
  
  // Log the move action
  console.log(`Order moved from ${fromTable} to ${toTable} by ${movedBy} at ${movedAt}`);
  
  // Refresh table list
  refreshTables();
  
  // Close modal
  closeMoveModal();
};
```

**3. Error Handling:**
```typescript
const handleMoveError = (error) => {
  switch (error.code) {
    case 'ORDER_NOT_ACTIVE':
      showNotification('Only active orders can be moved', 'warning');
      break;
    case 'ORDER_ALREADY_AT_TABLE':
      showNotification('Order is already at this table', 'warning');
      break;
    case 'ORDER_NOT_FOUND':
      showNotification('Order not found', 'error');
      break;
    case 'TABLE_NOT_FOUND':
      showNotification('Target table not found', 'error');
      break;
    case 'VALIDATION_ERROR':
      showNotification('Please select a valid table', 'error');
      break;
    default:
      showNotification('Failed to move order', 'error');
  }
};
```

===========================================
UI UPDATES REQUIRED
===========================================

**1. Update Order Display:**
- Show new table number: `order.tableNumber`
- Update order status if needed
- Refresh order details

**2. Update Table Status:**
- Mark old table as available: `fromTable`
- Mark new table as occupied: `toTable`
- Update table list/display

**3. Show Move Confirmation:**
- Display success message with table names
- Show who moved the order: `movedBy`
- Show when it was moved: `movedAt`

**4. Handle Modal/Form:**
- Close move order modal
- Reset form fields
- Clear any error states

===========================================
VALIDATION RULES
===========================================

**Frontend Validation:**
1. ✅ Order must be active (status === 'active')
2. ✅ Target table must be different from current table
3. ✅ Target table must be available
4. ✅ User must have appropriate permissions

**Backend Validation:**
1. ✅ Order exists and belongs to tenant
2. ✅ Order status is 'active'
3. ✅ Target table exists and is active
4. ✅ Order is not already at target table
5. ✅ User has required role permissions

===========================================
TESTING CHECKLIST
===========================================

**✅ Test Cases:**
1. ✅ Move active order to available table
2. ✅ Try to move closed order (should fail)
3. ✅ Try to move to same table (should fail)
4. ✅ Try to move to non-existent table (should fail)
5. ✅ Try to move without authentication (should fail)
6. ✅ Verify UI updates after successful move
7. ✅ Verify error messages display correctly

===========================================
COMMON ISSUES & SOLUTIONS
===========================================

**Issue 1: "Cannot read properties of undefined (reading 'fromTable')"**
- ✅ **FIXED**: Backend now returns `fromTable` instead of `previousTable`

**Issue 2: Order status showing as closed**
- **Solution**: Only active orders can be moved. Check order status before allowing move.

**Issue 3: Table not found errors**
- **Solution**: Ensure target table exists and is active in the system.

**Issue 4: Permission denied**
- **Solution**: Ensure user has WAITER, CASHIER, KITCHEN, MANAGER, or TENANT_ADMIN role.

===========================================
EXAMPLE USAGE
===========================================

```typescript
// Complete example
const handleMoveOrder = async () => {
  const orderId = 'order_1755171040869_lyw93';
  const targetTableId = 'table_1754760929456_duftr';
  
  try {
    const result = await moveOrderToTable(orderId, targetTableId);
    
    // Success
    console.log('Order moved successfully:', result);
    
    // Update UI
    setOrder(result.order);
    setCurrentTable(result.toTable);
    showSuccessMessage(`Order moved to ${result.toTable}`);
    
  } catch (error) {
    // Error handled in moveOrderToTable function
    console.error('Move failed:', error);
  }
};
```

===========================================
SUCCESS METRICS
===========================================

✅ **Backend Working:**
- Move-table endpoint functional
- Proper response structure with `fromTable` and `toTable`
- All validations working
- Error handling complete

✅ **Frontend Ready:**
- Response structure documented
- Error handling examples provided
- UI update guidelines included
- Testing checklist provided

===========================================
CONTACT & SUPPORT
===========================================

Backend Status: ✅ FULLY WORKING
Frontend Action: ✅ READY TO INTEGRATE
Response Structure: ✅ FIXED (fromTable/toTable)

===========================================
FINAL NOTES
===========================================

🎉 **MOVE TABLE FUNCTIONALITY IS COMPLETE!**

The backend now returns the correct response structure:
- `fromTable` - Source table
- `toTable` - Destination table
- `order` - Updated order data
- `movedBy` - User who performed the move
- `movedAt` - Timestamp of the move

Your frontend team can now implement table management features with confidence!

===========================================
