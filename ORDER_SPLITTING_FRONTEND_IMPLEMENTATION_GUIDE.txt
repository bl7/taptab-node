ORDER SPLITTING FUNCTIONALITY - FRONTEND IMPLEMENTATION GUIDE
================================================================

OVERVIEW
--------
Order Splitting allows restaurant staff to split selected items from an existing order into a new separate order. 
This is essential for:
- Group dining where customers want separate bills
- Converting dine-in items to takeaway orders
- Splitting large orders for kitchen management
- Creating separate bills for different payment methods
- Accommodating last-minute customer requests

The split order can be on the same table or moved to a different table, with independent customer information.

API ENDPOINT
------------
POST /api/v1/orders/:orderId/split

Headers:
- Content-Type: application/json
- Authorization: Bearer {JWT_TOKEN}

Request Body:
{
  "itemsToSplit": [
    {
      "itemId": "oi_123456789",
      "quantity": 2
    },
    {
      "itemId": "oi_987654321", 
      "quantity": 1
    }
  ],
  "newTableId": "table_5",           // Optional: Defaults to source order's table
  "customerName": "Split Customer",   // Optional: Defaults to source order's customer
  "customerPhone": "+1234567890",    // Optional
  "specialInstructions": "Special notes for split order", // Optional
  "reason": "Customer wants separate bill" // Optional: For audit trail
}

Response (Success):
{
  "success": true,
  "data": {
    "newOrder": {
      "id": "order_split_1754496472069_m6qm8",
      "orderNumber": "SPLIT-1754496472069",
      "tableId": "table_5",
      "tableNumber": "table_5",
      "items": [
        {
          "id": "oi_split_1754496472147_68xf2",
          "menuItemId": "item_123",
          "menuItemName": "Apple Juice",
          "quantity": 2,
          "price": 2,
          "totalPrice": 4,
          "notes": "No ice",
          "status": "active"
        }
      ],
      "total": 4,
      "status": "active",
      "customerName": "Split Customer",
      "customerPhone": "+1234567890",
      "specialInstructions": "Split from ORDER-123: Customer wants separate bill",
      "createdAt": "2025-08-06T16:07:52.070Z",
      "updatedAt": "2025-08-06T16:07:52.070Z"
    },
    "updatedSourceOrder": {
      "id": "order_original_123",
      "orderNumber": "ORDER-123",
      "tableId": "table_1",
      "tableNumber": "table_1",
      "items": [
        // Remaining items after split
      ],
      "total": 196,  // Updated total after items removed
      "status": "active",
      "hasRemainingItems": true,
      "customerName": "Original Customer",
      "updatedAt": "2025-08-06T16:07:52.478Z"
    },
    "splitDetails": {
      "sourceOrderId": "order_original_123",
      "newOrderId": "order_split_1754496472069_m6qm8",
      "itemsSplit": 2,
      "totalSplitAmount": 4,
      "sourceOrderRemainingTotal": 196,
      "fromTable": "table_1",
      "toTable": "table_5",
      "reason": "Customer wants separate bill",
      "splitBy": "John Doe",
      "splitAt": "2025-08-06T16:07:52.810Z"
    }
  },
  "message": "Order split successfully"
}

Error Responses:
- 400: VALIDATION_ERROR - "Items to split are required"
- 400: ITEM_NOT_FOUND - "Item not found in source order"
- 400: INSUFFICIENT_QUANTITY - "Cannot split more items than available"
- 400: INVALID_ORDER_STATUS - "Only active or pending orders can be split"
- 400: TABLE_NOT_FOUND - "New table not found"
- 404: NOT_FOUND - "Source order not found"

FRONTEND IMPLEMENTATION
=======================

1. SPLIT BUTTON PLACEMENT
--------------------------
Add "Split Order" button to order details view or order actions menu.

Example placement in order details:
┌─────────────────────────────────────────┐
│ Order #ORDER-123 - Table 1 - $200.00   │
│ ┌────────┐ ┌──────────┐ ┌─────────────┐ │
│ │  Edit  │ │Move Table│ │ Split Order │ │
│ └────────┘ └──────────┘ └─────────────┘ │
│                                         │
│ Items (15):                             │
│ ☐ 2x Apple Juice - $4.00               │
│ ☐ 1x Aachi Khau - $20.00               │
│ ☐ 3x Chana Bhuna - $60.00              │
│ ...                                     │
└─────────────────────────────────────────┘

2. BUTTON VISIBILITY LOGIC
---------------------------
```javascript
const shouldShowSplitButton = (order) => {
  return ['active', 'pending'].includes(order.status.toLowerCase()) && 
         order.items.length > 1; // Must have multiple items to split
};

const canSplitOrder = (userRole) => {
  return ['TENANT_ADMIN', 'MANAGER', 'WAITER'].includes(userRole);
};

// Show button only if:
// ✅ Order status is active or pending
// ✅ Order has multiple items (can't split single item order)
// ✅ User has permission (ADMIN/MANAGER/WAITER)
```

3. ORDER SPLITTING MODAL COMPONENT
-----------------------------------
```jsx
const OrderSplitModal = ({ order, isOpen, onClose, tables }) => {
  const [selectedItems, setSelectedItems] = useState([]);
  const [newTableId, setNewTableId] = useState('');
  const [customerName, setCustomerName] = useState('');
  const [customerPhone, setCustomerPhone] = useState('');
  const [specialInstructions, setSpecialInstructions] = useState('');
  const [reason, setReason] = useState('');
  const [loading, setLoading] = useState(false);

  const handleItemSelection = (item, quantity) => {
    setSelectedItems(prev => {
      const existing = prev.find(si => si.itemId === item.id);
      if (existing) {
        if (quantity === 0) {
          return prev.filter(si => si.itemId !== item.id);
        }
        return prev.map(si => 
          si.itemId === item.id ? {...si, quantity} : si
        );
      } else if (quantity > 0) {
        return [...prev, { itemId: item.id, quantity, item }];
      }
      return prev;
    });
  };

  const calculateSplitTotal = () => {
    return selectedItems.reduce((total, selected) => {
      return total + (selected.item.price * selected.quantity);
    }, 0);
  };

  const handleSplit = async () => {
    if (selectedItems.length === 0) return;
    
    setLoading(true);
    try {
      const response = await splitOrder(order.id, {
        itemsToSplit: selectedItems.map(si => ({
          itemId: si.itemId,
          quantity: si.quantity
        })),
        newTableId: newTableId || undefined,
        customerName: customerName || undefined,
        customerPhone: customerPhone || undefined,
        specialInstructions: specialInstructions || undefined,
        reason: reason || 'Order split requested'
      });
      
      // Success handling
      toast.success(`Order split successfully! New order: ${response.data.newOrder.orderNumber}`);
      onClose();
      refreshOrders(); // Refresh the orders list
      
      // Optionally navigate to new order
      if (response.data.newOrder.id) {
        navigateToOrder(response.data.newOrder.id);
      }
      
    } catch (error) {
      handleSplitError(error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} size="large">
      <div className="split-order-modal">
        <h3>Split Order</h3>
        
        {/* Source Order Information */}
        <div className="source-order-info">
          <h4>Source Order: {order.orderNumber}</h4>
          <p><strong>Current Table:</strong> {order.tableNumber}</p>
          <p><strong>Total:</strong> ${order.total}</p>
          <p><strong>Customer:</strong> {order.customerName || 'Walk-in'}</p>
        </div>

        {/* Item Selection */}
        <div className="item-selection">
          <h4>Select Items to Split:</h4>
          <div className="items-list">
            {order.items.map(item => (
              <div key={item.id} className="item-row">
                <div className="item-info">
                  <span className="item-name">{item.menuItemName}</span>
                  <span className="item-price">${item.price} each</span>
                  <span className="item-notes">{item.notes && `(${item.notes})`}</span>
                </div>
                
                <div className="quantity-selector">
                  <span>Available: {item.quantity}</span>
                  <div className="quantity-controls">
                    <button 
                      onClick={() => {
                        const current = selectedItems.find(si => si.itemId === item.id)?.quantity || 0;
                        if (current > 0) handleItemSelection(item, current - 1);
                      }}
                      disabled={!selectedItems.find(si => si.itemId === item.id)}
                    >
                      -
                    </button>
                    
                    <input
                      type="number"
                      min="0"
                      max={item.quantity}
                      value={selectedItems.find(si => si.itemId === item.id)?.quantity || 0}
                      onChange={(e) => handleItemSelection(item, parseInt(e.target.value) || 0)}
                      className="quantity-input"
                    />
                    
                    <button 
                      onClick={() => {
                        const current = selectedItems.find(si => si.itemId === item.id)?.quantity || 0;
                        if (current < item.quantity) handleItemSelection(item, current + 1);
                      }}
                      disabled={selectedItems.find(si => si.itemId === item.id)?.quantity >= item.quantity}
                    >
                      +
                    </button>
                  </div>
                </div>
                
                <div className="item-split-total">
                  ${(selectedItems.find(si => si.itemId === item.id)?.quantity || 0) * item.price}
                </div>
              </div>
            ))}
          </div>
          
          {/* Split Summary */}
          <div className="split-summary">
            <p><strong>Items to Split:</strong> {selectedItems.length}</p>
            <p><strong>Split Total:</strong> ${calculateSplitTotal()}</p>
            <p><strong>Remaining Total:</strong> ${order.total - calculateSplitTotal()}</p>
          </div>
        </div>

        {/* New Order Details */}
        <div className="new-order-details">
          <h4>New Order Details:</h4>
          
          {/* Table Selection */}
          <div className="form-group">
            <label>Table (optional):</label>
            <select 
              value={newTableId} 
              onChange={(e) => setNewTableId(e.target.value)}
            >
              <option value="">Same table as source order</option>
              {tables
                .filter(table => table.id !== order.tableNumber)
                .map(table => (
                  <option key={table.id} value={table.id}>
                    Table {table.number} ({table.seats} seats)
                  </option>
                ))
              }
            </select>
          </div>

          {/* Customer Information */}
          <div className="form-group">
            <label>Customer Name:</label>
            <input
              type="text"
              value={customerName}
              onChange={(e) => setCustomerName(e.target.value)}
              placeholder={order.customerName || "Enter customer name"}
            />
          </div>

          <div className="form-group">
            <label>Customer Phone:</label>
            <input
              type="tel"
              value={customerPhone}
              onChange={(e) => setCustomerPhone(e.target.value)}
              placeholder={order.customerPhone || "Enter phone number"}
            />
          </div>

          {/* Special Instructions */}
          <div className="form-group">
            <label>Special Instructions:</label>
            <textarea
              value={specialInstructions}
              onChange={(e) => setSpecialInstructions(e.target.value)}
              placeholder="Any special instructions for the new order"
              rows={3}
            />
          </div>

          {/* Reason for Split */}
          <div className="form-group">
            <label>Reason for Split:</label>
            <select 
              value={reason} 
              onChange={(e) => setReason(e.target.value)}
            >
              <option value="">Select reason...</option>
              <option value="Customer wants separate bill">Customer wants separate bill</option>
              <option value="Different payment methods">Different payment methods</option>
              <option value="Takeaway conversion">Converting to takeaway</option>
              <option value="Delivery conversion">Converting to delivery</option>
              <option value="Group split request">Group split request</option>
              <option value="Table change">Moving to different table</option>
            </select>
            
            <input 
              type="text" 
              placeholder="Or enter custom reason..."
              value={reason}
              onChange={(e) => setReason(e.target.value)}
              style={{ marginTop: '10px' }}
            />
          </div>
        </div>

        {/* Action Buttons */}
        <div className="modal-actions">
          <button onClick={onClose} disabled={loading} className="secondary">
            Cancel
          </button>
          <button 
            onClick={handleSplit} 
            disabled={selectedItems.length === 0 || loading}
            className="primary"
          >
            {loading ? 'Splitting Order...' : `Split Order ($${calculateSplitTotal()})`}
          </button>
        </div>
      </div>
    </Modal>
  );
};
```

4. QUICK SPLIT BUTTONS (OPTIONAL)
----------------------------------
For common splitting scenarios, add quick action buttons:

```jsx
const QuickSplitActions = ({ order, onCustomSplit }) => (
  <div className="quick-split-actions">
    <h4>Quick Split Options:</h4>
    
    <button 
      onClick={() => splitHalf(order)}
      className="quick-split-btn"
    >
      Split in Half
    </button>
    
    <button 
      onClick={() => splitEvenly(order, 3)}
      className="quick-split-btn"
    >
      Split 3 Ways
    </button>
    
    <button 
      onClick={() => splitByItemType(order)}
      className="quick-split-btn"
    >
      Split by Item Type
    </button>
    
    <button 
      onClick={onCustomSplit}
      className="custom-split-btn"
    >
      Custom Split...
    </button>
  </div>
);

const splitHalf = async (order) => {
  const halfItems = order.items.slice(0, Math.ceil(order.items.length / 2));
  const itemsToSplit = halfItems.map(item => ({
    itemId: item.id,
    quantity: Math.ceil(item.quantity / 2)
  }));
  
  await splitOrder(order.id, {
    itemsToSplit,
    reason: 'Split in half'
  });
};
```

5. API INTEGRATION FUNCTION
----------------------------
```javascript
const splitOrder = async (orderId, splitData) => {
  const response = await fetch(`/api/v1/orders/${orderId}/split`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${getAuthToken()}`
    },
    body: JSON.stringify(splitData)
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.error?.message || 'Failed to split order');
  }

  return response.json();
};
```

6. STATE MANAGEMENT
-------------------
After successful split, update your application state:

```javascript
const handleSplitSuccess = (response) => {
  const { newOrder, updatedSourceOrder, splitDetails } = response.data;
  
  // Update orders list in state
  setOrders(prevOrders => {
    const updatedOrders = prevOrders.map(order => 
      order.id === updatedSourceOrder.id ? updatedSourceOrder : order
    );
    
    // Add new split order
    return [...updatedOrders, newOrder];
  });

  // Update table assignments if you track that
  if (splitDetails.fromTable !== splitDetails.toTable) {
    updateTableAssignments(splitDetails.fromTable, splitDetails.toTable);
  }
  
  // Show success notification
  showNotification({
    type: 'success',
    title: 'Order Split Successfully',
    message: `${splitDetails.itemsSplit} items ($${splitDetails.totalSplitAmount}) moved to ${newOrder.orderNumber}`,
    actions: [
      {
        label: 'View New Order',
        action: () => navigateToOrder(newOrder.id)
      }
    ]
  });

  // Log for audit trail
  console.log('Order split:', splitDetails);
};
```

7. ERROR HANDLING
-----------------
```javascript
const handleSplitError = (error) => {
  const errorMessages = {
    'VALIDATION_ERROR': 'Please select valid items to split',
    'ITEM_NOT_FOUND': 'One or more selected items are no longer available',
    'INSUFFICIENT_QUANTITY': 'Cannot split more items than available in the order',
    'INVALID_ORDER_STATUS': 'This order cannot be split (must be active or pending)',
    'TABLE_NOT_FOUND': 'Selected table is not available',
    'NOT_FOUND': 'Order not found'
  };

  const message = errorMessages[error.code] || error.message || 'Failed to split order';
  
  toast.error(message, {
    duration: 5000,
    position: 'top-right'
  });
  
  // Log error for debugging
  console.error('Split order error:', error);
};
```

8. REAL-TIME UPDATES
--------------------
If using WebSocket for real-time updates:

```javascript
// Listen for split events
socket.on('orderSplit', (data) => {
  const { sourceOrderId, newOrderId, splitDetails } = data;
  
  // Update UI to reflect the split
  updateOrderInList(sourceOrderId, data.updatedSourceOrder);
  addOrderToList(data.newOrder);
  
  // Show notification to other users
  if (splitDetails.splitBy !== currentUser.name) {
    showNotification({
      type: 'info',
      title: 'Order Split',
      message: `${splitDetails.splitBy} split order ${sourceOrderId}`,
      duration: 3000
    });
  }
});
```

9. USAGE SCENARIOS
------------------

Scenario 1: Group Dining Separate Bills
- Group of 4 wants individual bills
- Waiter selects each person's items
- Creates 4 separate orders on same table
- Each person pays separately

Scenario 2: Takeaway from Dine-in
- Customer decides to take some items home
- Waiter splits takeaway items to new order
- Assigns takeaway order to pickup table
- Different customer info for takeaway receipt

Scenario 3: Payment Method Split
- Customer wants to pay part with cash, part with card
- Split order by payment preference
- Process payments separately
- Maintain order relationship for kitchen

Scenario 4: Table Change Split
- Some customers move to different table
- Split their items to new table
- Continue service at both tables
- Separate billing for each table

10. UI/UX CONSIDERATIONS
------------------------

Visual Design:
- Use checkboxes or quantity selectors for item selection
- Show running total for split items
- Visual separator between source and new order details
- Clear indication of which items are being moved

Validation:
- Prevent splitting all items (must leave at least one item)
- Validate quantity doesn't exceed available
- Show warnings for large splits
- Confirm action before processing

Mobile Responsive:
- Scrollable item list for mobile
- Touch-friendly quantity controls
- Simplified UI for small screens
- Swipe gestures for item selection

Accessibility:
- Screen reader support for all controls
- Keyboard navigation
- High contrast mode support
- Clear labels and instructions

11. INTEGRATION CHECKLIST
--------------------------

Backend Integration:
□ API endpoint is accessible from frontend
□ JWT authentication is working
□ Error responses are handled properly
□ CORS is configured if needed

State Management:
□ Orders list updates after split
□ Table assignments update (if tracked)
□ User notifications display correctly
□ Loading states work properly

UI Components:
□ Split button appears on eligible orders
□ Modal opens and closes correctly
□ Item selection works properly
□ Form validation functions
□ Success/error messages display

Permissions:
□ Only authorized users see split button
□ API rejects unauthorized requests
□ Role-based access control works

Testing:
□ Test splitting to same table
□ Test splitting to different table
□ Test partial quantity splits
□ Test with different user roles
□ Test error scenarios
□ Test on mobile and desktop

12. PERFORMANCE CONSIDERATIONS
-------------------------------

Optimization:
- Lazy load table list for large restaurants
- Debounce quantity input changes
- Cache order data during split operation
- Minimize API calls during item selection

Large Orders:
- Pagination for orders with many items
- Virtualized lists for 50+ items
- Search/filter items by name or category
- Bulk selection tools

Network Handling:
- Retry logic for failed splits
- Offline mode with sync when reconnected
- Optimistic UI updates
- Progress indicators for slow operations

SUMMARY
=======
Order Splitting provides flexible bill management for restaurants, allowing staff to:

1. **Split items between tables** - Move specific items to different tables
2. **Create separate bills** - Generate individual orders for group dining
3. **Partial quantity splits** - Split some quantity while keeping rest
4. **Customer customization** - Assign different customer info to split orders
5. **Audit trail** - Complete tracking of all split operations

Key Implementation Requirements:
- Item selection interface with quantity controls
- Table and customer information forms
- Real-time total calculations
- Comprehensive error handling
- State management for both orders
- Success notifications and navigation

This feature enhances restaurant flexibility and improves customer service by accommodating 
various billing and seating arrangements.