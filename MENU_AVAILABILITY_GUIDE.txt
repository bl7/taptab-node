===========================================
TAP TAB MENU ITEM AVAILABILITY GUIDE
===========================================

🚨 NEW FEATURE: Menu Item Availability Added

Menu items now have an "available" field that controls whether they can be ordered.
This guide covers all routes affected and how to handle availability in the frontend.

===========================================
AVAILABILITY FIELD STRUCTURE
===========================================

Menu items now include:
```json
{
  "id": "item_123",
  "name": "Chicken Curry",
  "price": 25.99,
  "isActive": true,        // Item is active in system
  "available": true,       // NEW: Item can be ordered
  "description": "...",
  "category": "...",
  // ... other fields
}
```

===========================================
AVAILABILITY LOGIC
===========================================

- isActive: true/false - Item exists in system (admin can see inactive items)
- available: true/false - Item can be ordered by customers (NEW FIELD)

AVAILABILITY RULES:
✅ isActive: true + available: true = Can be ordered
❌ isActive: true + available: false = Cannot be ordered (out of stock)
❌ isActive: false + available: false = Item hidden from customers

===========================================
ROUTES AFFECTED BY AVAILABILITY
===========================================

===========================================
1. MENU ITEMS ROUTES
===========================================

BASE URL: http://localhost:5050/api/v1/menu

1. GET /menu/items
   - Returns: All menu items with availability status
   - Frontend should: Filter by available: true for customer display
   - Response Structure:
   ```json
   {
     "success": true,
     "data": {
       "items": [
         {
           "id": "item_123",
           "name": "Chicken Curry",
           "price": 25.99,
           "isActive": true,
           "available": true,  // ← CHECK THIS FIELD
           "description": "...",
           "category": "Dinner",
           "image": "...",
           "ingredients": [...],
           "allergens": [...],
           "tags": [...]
         }
       ]
     }
   }
   ```

2. GET /menu/items/:id
   - Returns: Single menu item with availability
   - Frontend should: Check available field before allowing order
   - Response Structure: Same as above but single item

3. POST /menu/items
   - Creates new menu item
   - Frontend should: Include available field in request
   - Request Structure:
   ```json
   {
     "name": "New Item",
     "price": 15.99,
     "description": "...",
     "categoryId": "cat_123",
     "isActive": true,
     "available": true,  // ← INCLUDE THIS FIELD
     "image": "..."
   }
   ```

4. PUT /menu/items/:id
   - Updates menu item including availability
   - Frontend should: Include available field in updates
   - Request Structure: Same as POST

5. DELETE /menu/items/:id
   - Soft deletes item (sets isActive: false)
   - Frontend should: Handle item removal from display

===========================================
2. PUBLIC MENU ROUTES (CUSTOMER FACING)
===========================================

BASE URL: http://localhost:5050/api/v1/public/menu

1. GET /public/menu/items
   - Returns: Only available menu items for customers
   - Frontend should: Display all returned items (already filtered)
   - Response Structure:
   ```json
   {
     "success": true,
     "data": {
       "items": [
         {
           "id": "item_123",
           "name": "Chicken Curry",
           "price": 25.99,
           "available": true,  // ← ALL ITEMS WILL BE true
           "description": "...",
           "category": "Dinner",
           "image": "...",
           "ingredients": [...],
           "allergens": [...],
           "tags": [...]
         }
       ]
     }
   }
   ```

2. GET /public/menu/categories
   - Returns: Categories with available items count
   - Frontend should: Show category only if it has available items
   - Response Structure:
   ```json
   {
     "success": true,
     "data": {
       "categories": [
         {
           "id": "cat_123",
           "name": "Dinner",
           "description": "...",
           "itemCount": 5,  // ← Only available items counted
           "items": [...]   // ← Only available items included
         }
       ]
     }
   }
   ```

===========================================
3. ORDER ROUTES
===========================================

BASE URL: http://localhost:5050/api/v1/orders

1. POST /orders
   - Creates new order
   - Frontend should: Validate all items are available before order
   - Backend will: Reject order if any item is unavailable
   - Request Structure:
   ```json
   {
     "items": [
       {
         "menuItemId": "item_123",
         "quantity": 2,
         "notes": "..."
       }
     ],
     "tableNumber": "1",
     "customerName": "John Doe"
   }
   ```

2. PUT /orders/:id/items/:itemId
   - Adds item to existing order
   - Frontend should: Check item availability before adding
   - Backend will: Reject if item unavailable

3. POST /public/orders
   - Public order creation (QR ordering)
   - Frontend should: Only show available items in menu
   - Backend will: Validate availability

===========================================
4. DASHBOARD & ANALYTICS ROUTES
===========================================

BASE URL: http://localhost:5050/api/v1/dashboard

1. GET /dashboard/top-items
   - Returns: Top selling items (includes availability status)
   - Frontend should: Show availability status in admin view
   - Response Structure:
   ```json
   {
     "success": true,
     "data": {
       "topItems": [
         {
           "menuItemId": "item_123",
           "name": "Chicken Curry",
           "quantity": 25,
           "revenue": 649.75,
           "orderCount": 20,
           "available": true  // ← AVAILABILITY STATUS
         }
       ]
     }
   }
   ```

2. GET /dashboard/overview
   - Returns: Dashboard overview including top items
   - Frontend should: Show availability status for admin

===========================================
5. KITCHEN ROUTES
===========================================

BASE URL: http://localhost:5050/api/v1/kitchen

1. GET /kitchen/orders
   - Returns: Active orders for kitchen
   - Frontend should: Show item availability status
   - Response Structure:
   ```json
   {
     "success": true,
     "data": {
       "orders": [
         {
           "id": "order_123",
           "items": [
             {
               "menuItemId": "item_123",
               "name": "Chicken Curry",
               "quantity": 2,
               "available": true  // ← AVAILABILITY STATUS
             }
           ]
         }
       ]
     }
   }
   ```

===========================================
FRONTEND INTEGRATION REQUIREMENTS
===========================================

===========================================
1. CUSTOMER FACING PAGES
===========================================

ADMIN MENU MANAGEMENT:
```javascript
// Show all items with availability toggle
const menuItems = response.data.items;
menuItems.forEach(item => {
  if (item.isActive) {
    // Show item with availability toggle
    const isAvailable = item.available;
    // Render availability toggle button
  }
});
```

CUSTOMER MENU DISPLAY:
```javascript
// Only show available items
const availableItems = response.data.items.filter(item => item.available);
// OR use /public/menu/items which already filters
```

ORDER CREATION:
```javascript
// Validate availability before order
const selectedItems = orderItems.filter(item => item.available);
if (selectedItems.length !== orderItems.length) {
  alert('Some items are no longer available');
  return;
}
```

===========================================
2. ADMIN DASHBOARD
===========================================

AVAILABILITY TOGGLE:
```javascript
// Toggle item availability
const toggleAvailability = async (itemId, available) => {
  const response = await fetch(`/api/v1/menu/items/${itemId}`, {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      available: available
    })
  });
};
```

AVAILABILITY INDICATOR:
```javascript
// Show availability status
const renderAvailabilityStatus = (item) => {
  if (item.available) {
    return <span className="available">✅ Available</span>;
  } else {
    return <span className="unavailable">❌ Unavailable</span>;
  }
};
```

===========================================
3. REAL-TIME UPDATES
===========================================

WEBSOCKET EVENTS:
```javascript
// Listen for availability changes
socket.on('menuItemAvailabilityChanged', (data) => {
  const { itemId, available } = data;
  // Update UI to reflect new availability
  updateMenuItemAvailability(itemId, available);
});
```

===========================================
4. ERROR HANDLING
===========================================

ORDER VALIDATION:
```javascript
// Handle unavailable items in order
const handleOrderSubmission = async (orderData) => {
  try {
    const response = await fetch('/api/v1/orders', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(orderData)
    });
    
    const result = await response.json();
    
    if (!result.success) {
      if (result.error?.code === 'ITEM_UNAVAILABLE') {
        alert('Some items are no longer available. Please refresh menu.');
      }
    }
  } catch (error) {
    console.error('Order submission failed:', error);
  }
};
```

===========================================
5. UI COMPONENTS TO ADD
===========================================

AVAILABILITY TOGGLE BUTTON:
```javascript
const AvailabilityToggle = ({ item, onToggle }) => {
  return (
    <button
      className={`availability-toggle ${item.available ? 'available' : 'unavailable'}`}
      onClick={() => onToggle(item.id, !item.available)}
    >
      {item.available ? '✅ Available' : '❌ Unavailable'}
    </button>
  );
};
```

AVAILABILITY FILTER:
```javascript
const AvailabilityFilter = ({ onFilterChange }) => {
  return (
    <select onChange={(e) => onFilterChange(e.target.value)}>
      <option value="all">All Items</option>
      <option value="available">Available Only</option>
      <option value="unavailable">Unavailable Only</option>
    </select>
  );
};
```

===========================================
6. DATABASE QUERIES AFFECTED
===========================================

MENU ITEMS QUERY:
```sql
-- Admin view (all items)
SELECT * FROM "menuItems" WHERE "tenantId" = $1 AND "isActive" = true;

-- Customer view (available items only)
SELECT * FROM "menuItems" WHERE "tenantId" = $1 AND "isActive" = true AND "available" = true;
```

ORDER VALIDATION:
```sql
-- Check if items are available before order
SELECT id, available FROM "menuItems" 
WHERE id = ANY($1) AND "tenantId" = $2 AND "isActive" = true AND "available" = true;
```

===========================================
7. TESTING CHECKLIST
===========================================

FRONTEND TESTING:
- [ ] Admin can toggle item availability
- [ ] Customer menu only shows available items
- [ ] Order creation validates availability
- [ ] Real-time updates work
- [ ] Error handling for unavailable items
- [ ] Availability status shows correctly
- [ ] Filtering by availability works

API TESTING:
```bash
# Test menu items with availability
curl -H "Authorization: Bearer TOKEN" \
  "http://localhost:5050/api/v1/menu/items"

# Test public menu (should only show available)
curl "http://localhost:5050/api/v1/public/menu/items"

# Test availability toggle
curl -X PUT -H "Authorization: Bearer TOKEN" \
  -H "Content-Type: application/json" \
  -d '{"available": false}' \
  "http://localhost:5050/api/v1/menu/items/item_123"
```

===========================================
8. MIGRATION NOTES
===========================================

EXISTING DATA:
- All existing menu items will have `available: true` by default
- No data migration required
- Existing orders will continue to work

BACKWARD COMPATIBILITY:
- Old API responses without `available` field will still work
- Frontend should handle missing `available` field gracefully
- Default to `available: true` if field is missing

===========================================
9. SECURITY CONSIDERATIONS
===========================================

PERMISSIONS:
- Only TENANT_ADMIN and MANAGER can toggle availability
- WAITER and CASHIER can view availability status
- Customers cannot see unavailable items

VALIDATION:
- Backend validates availability before order creation
- Frontend should also validate but trust backend validation
- Real-time updates ensure consistency

===========================================
10. PERFORMANCE IMPACT
===========================================

QUERY OPTIMIZATION:
- Availability filtering adds minimal overhead
- Index on (tenantId, isActive, available) recommended
- Caching available items list for customer menu

FRONTEND OPTIMIZATION:
- Cache available items list
- Debounce availability toggle requests
- Optimistic UI updates with rollback on error

===========================================
CONTACT & SUPPORT
===========================================

If you encounter issues:
1. Check if `available` field is present in API responses
2. Verify authentication permissions for availability toggle
3. Test with curl commands above
4. Check browser console for errors
5. Verify WebSocket connection for real-time updates

===========================================
