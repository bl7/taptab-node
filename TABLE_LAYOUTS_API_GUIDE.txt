TABLE LAYOUTS API - COMPLETE CRUD GUIDE
=======================================

ðŸŽ¯ OVERVIEW
===========
Table Layouts API provides complete CRUD operations for managing restaurant floor plan layouts.
Each layout is stored as JSONB data and belongs to a specific location within a tenant.

ðŸ“Š KEY FEATURES
===============
âœ… CRUD operations for table layouts
âœ… JSON-based layout storage with validation
âœ… Location-based layout organization
âœ… Default layout management per location
âœ… User tracking for layout creation/updates
âœ… Tenant isolation for multi-restaurant support

===========================================================================

ðŸš€ API ENDPOINTS
================

1. GET /api/v1/table-layouts
   -------------------------
   Purpose: Get all table layouts for the tenant
   Auth: Required (WAITER, CASHIER, MANAGER, TENANT_ADMIN)
   
   Query Parameters:
   - locationId (optional): Filter by specific location
   - includeInactive (optional): Include inactive layouts
   
   Response:
   {
     "success": true,
     "data": {
       "layouts": [
         {
           "id": "layout_123",
           "name": "Main Floor Standard",
           "description": "Standard layout for main dining area",
           "locationId": "loc_main_456",
           "locationDetails": {
             "name": "Main Floor",
             "description": "Primary dining area"
           },
           "layoutJson": {
             "type": "grid",
             "dimensions": {"width": 800, "height": 600},
             "tables": [...],
             "walls": [...],
             "objects": [...]
           },
           "isActive": true,
           "isDefault": true,
           "createdByUserId": "user_789",
           "createdBy": "John Doe",
           "createdAt": "2025-01-01T00:00:00.000Z",
           "updatedAt": "2025-01-01T00:00:00.000Z"
         }
       ]
     }
   }

2. GET /api/v1/table-layouts/:id
   ------------------------------
   Purpose: Get specific table layout by ID
   Auth: Required (WAITER, CASHIER, MANAGER, TENANT_ADMIN)
   
   Response: Same format as single layout from GET all

3. POST /api/v1/table-layouts
   ----------------------------
   Purpose: Create new table layout
   Auth: Required (TENANT_ADMIN, MANAGER)
   
   Request Body:
   {
     "name": "VIP Area Layout",
     "description": "Premium seating layout",
     "locationId": "loc_vip_123",
     "layoutJson": {
       "type": "freeform",
       "dimensions": {"width": 1000, "height": 800},
       "tables": [
         {
           "tableId": "table_vip_001",
           "position": {"x": 200, "y": 150},
           "size": {"width": 100, "height": 100},
           "shape": "round",
           "seats": 6,
           "rotation": 0
         }
       ],
       "objects": [
         {
           "type": "bar",
           "position": {"x": 50, "y": 500},
           "size": {"width": 200, "height": 80}
         }
       ]
     },
     "isActive": true,      // optional, defaults to true
     "isDefault": false     // optional, defaults to false
   }
   
   Response: Created layout object (same format as GET)

4. PUT /api/v1/table-layouts/:id
   ------------------------------
   Purpose: Update existing table layout
   Auth: Required (TENANT_ADMIN, MANAGER)
   
   Request Body: Same as POST (all fields optional for updates)
   
   Response: Updated layout object

5. DELETE /api/v1/table-layouts/:id
   ---------------------------------
   Purpose: Delete table layout
   Auth: Required (TENANT_ADMIN, MANAGER)
   
   Special Rules:
   - Cannot delete the only active layout for a location
   - If deleting default layout, another will be auto-promoted
   
   Response:
   {
     "success": true,
     "data": {"success": true},
     "message": "Table layout deleted successfully"
   }

6. PUT /api/v1/table-layouts/:id/set-default
   -------------------------------------------
   Purpose: Set layout as default for its location
   Auth: Required (TENANT_ADMIN, MANAGER)
   
   Response:
   {
     "success": true,
     "data": {"success": true},
     "message": "Table layout set as default successfully"
   }

===========================================================================

ðŸ“‹ LAYOUT JSON STRUCTURE
=========================

The layoutJson field supports flexible JSON structures. Here's a recommended format:

BASIC STRUCTURE:
{
  "type": "grid" | "freeform",           // Layout type
  "dimensions": {                        // Canvas dimensions
    "width": 800,
    "height": 600,
    "gridSize": 50                       // Grid snap size (optional)
  },
  "tables": [                            // Table positions and properties
    {
      "tableId": "table_123",            // Reference to actual table
      "position": {"x": 100, "y": 150},  // Screen coordinates
      "size": {"width": 80, "height": 80},
      "shape": "round" | "rectangle" | "square",
      "seats": 4,                        // Visual indicator
      "rotation": 0                      // Degrees
    }
  ],
  "walls": [                             // Room boundaries
    {
      "start": {"x": 0, "y": 0},
      "end": {"x": 800, "y": 0}
    }
  ],
  "objects": [                           // Furniture and fixtures
    {
      "type": "bar" | "kitchen_door" | "window" | "pillar",
      "position": {"x": 50, "y": 500},
      "size": {"width": 200, "height": 80}
    }
  ]
}

EXTENDED FEATURES:
{
  "zones": [                             // Dining zones/sections
    {
      "name": "Main Dining",
      "color": "#e3f2fd",
      "bounds": {"x": 0, "y": 0, "width": 400, "height": 600}
    }
  ],
  "metadata": {                          // Custom properties
    "theme": "modern",
    "background": "#ffffff",
    "version": "1.0"
  }
}

===========================================================================

ðŸ’¡ FRONTEND INTEGRATION EXAMPLES
=================================

1. FETCH LAYOUTS FOR LOCATION
   ---------------------------
   // Get all layouts for specific location
   const response = await fetch('/api/v1/table-layouts?locationId=loc_main_123');
   const { layouts } = await response.json();

2. CREATE NEW LAYOUT
   ------------------
   const newLayout = {
     name: 'Evening Layout',
     description: 'Optimized for dinner service',
     locationId: 'loc_main_123',
     layoutJson: {
       type: 'grid',
       dimensions: { width: 800, height: 600, gridSize: 50 },
       tables: [
         {
           tableId: 'table_001',
           position: { x: 100, y: 100 },
           size: { width: 80, height: 80 },
           shape: 'round',
           seats: 4,
           rotation: 0
         }
       ]
     }
   };
   
   const response = await fetch('/api/v1/table-layouts', {
     method: 'POST',
     headers: { 'Content-Type': 'application/json' },
     body: JSON.stringify(newLayout)
   });

3. UPDATE LAYOUT
   -------------
   const updates = {
     layoutJson: {
       ...existingLayout.layoutJson,
       tables: modifiedTablesArray
     }
   };
   
   await fetch(`/api/v1/table-layouts/${layoutId}`, {
     method: 'PUT',
     headers: { 'Content-Type': 'application/json' },
     body: JSON.stringify(updates)
   });

4. SET AS DEFAULT
   --------------
   await fetch(`/api/v1/table-layouts/${layoutId}/set-default`, {
     method: 'PUT'
   });

===========================================================================

ðŸŽ¨ LAYOUT EDITOR INTEGRATION
=============================

DRAG & DROP IMPLEMENTATION:
1. Load layout JSON from API
2. Render tables at specified positions
3. Enable drag handles on table elements
4. Update positions in layoutJson on drag end
5. Save updated layout via PUT API

TABLE MANAGEMENT:
- Link tableId in layout to actual table records
- Validate table exists before saving layout
- Handle table deletion (remove from layouts)
- Update table properties (seats, shape) in layout

REAL-TIME COLLABORATION:
- Use WebSocket events for multi-user editing
- Implement layout locking during editing
- Show user cursors and selections

===========================================================================

ðŸ”’ BUSINESS RULES
=================

DEFAULT LAYOUT MANAGEMENT:
- Only one default layout per location
- Setting new default automatically unsets previous
- Cannot delete only active layout for location
- Auto-promote layout to default when last default deleted

VALIDATION RULES:
- Layout name must be unique per location
- LocationId must exist and be active
- LayoutJson must be valid JSON object
- Only TENANT_ADMIN and MANAGER can create/edit/delete

PERMISSIONS:
- All roles can VIEW layouts
- Only MANAGER+ can CREATE/UPDATE/DELETE layouts
- Tenant isolation enforced on all operations

===========================================================================

ðŸ§ª TESTING EXAMPLES
====================

1. Test layout CRUD operations
2. Verify default layout switching
3. Test location-based filtering
4. Validate JSON structure constraints
5. Test permission restrictions
6. Verify tenant isolation

Example curl commands:

# Get layouts for location
curl -H "Authorization: Bearer $TOKEN" \
  "http://localhost:5050/api/v1/table-layouts?locationId=loc_123"

# Create layout
curl -X POST -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{"name":"Test Layout","locationId":"loc_123","layoutJson":{"type":"grid"}}' \
  "http://localhost:5050/api/v1/table-layouts"

===========================================================================

ðŸ“ˆ PERFORMANCE CONSIDERATIONS
=============================

JSON INDEXING:
- GIN index on layout_json enables fast JSON queries
- Query specific JSON paths: layout_json->'tables'
- Use containment operators for complex searches

CACHING STRATEGIES:
- Cache default layouts per location
- Invalidate cache on layout updates
- Consider Redis for frequently accessed layouts

OPTIMIZATION:
- Paginate layouts for locations with many layouts
- Compress large JSON layouts
- Lazy load layout details for list views

Your table layouts system is now ready for production use! ðŸš€
