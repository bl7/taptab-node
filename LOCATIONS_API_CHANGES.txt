LOCATIONS API CHANGES - FRONTEND INTEGRATION GUIDE
==================================================

üéØ OVERVIEW
===========
Location field has been converted from simple text to a proper relational structure.
Tables now reference a separate locations table for better management and consistency.

üìä DATABASE CHANGES SUMMARY
============================
‚úÖ NEW: locations table created
‚úÖ NEW: tables.locationId field added (references locations.id)  
‚úÖ KEPT: tables.location field (for backward compatibility during transition)

===========================================================================

üöÄ NEW API ENDPOINTS CREATED
=============================

1. GET /api/v1/locations
   ----------------------
   Purpose: Get all locations for the tenant
   Auth: Required (WAITER, CASHIER, MANAGER, TENANT_ADMIN)
   
   Query Parameters:
   - includeInactive (optional): Include inactive locations
   
   Response:
   {
     "success": true,
     "data": {
       "locations": [
         {
           "id": "loc_main_area_123",
           "name": "Main Area",
           "description": "Primary dining area",
           "isActive": true,
           "tableCount": 5,
           "createdAt": "2025-01-01T00:00:00.000Z",
           "updatedAt": "2025-01-01T00:00:00.000Z"
         }
       ]
     }
   }

2. POST /api/v1/locations
   -----------------------
   Purpose: Create new location
   Auth: Required (TENANT_ADMIN, MANAGER)
   
   Request Body:
   {
     "name": "VIP Area",
     "description": "Premium seating section",
     "isActive": true  // optional, defaults to true
   }
   
   Response:
   {
     "success": true,
     "data": {
       "location": {
         "id": "loc_vip_area_456",
         "name": "VIP Area", 
         "description": "Premium seating section",
         "isActive": true,
         "tableCount": 0,
         "createdAt": "2025-01-01T00:00:00.000Z",
         "updatedAt": "2025-01-01T00:00:00.000Z"
       }
     },
     "message": "Location created successfully"
   }

3. PUT /api/v1/locations/:id
   --------------------------
   Purpose: Update existing location
   Auth: Required (TENANT_ADMIN, MANAGER)
   
   Request Body:
   {
     "name": "Updated VIP Area",
     "description": "Updated description",
     "isActive": false
   }
   
   Response: Same as POST response format

4. DELETE /api/v1/locations/:id
   -----------------------------
   Purpose: Delete location
   Auth: Required (TENANT_ADMIN, MANAGER)
   
   Query Parameters:
   - force (optional): Set to "true" to force delete and unassign tables
   
   Response:
   {
     "success": true,
     "data": { "success": true },
     "message": "Location deleted successfully"
   }
   
   Error Cases:
   - 400: Location has tables assigned (use force=true)
   - 404: Location not found

===========================================================================

üìù MODIFIED API ENDPOINTS
==========================

1. GET /api/v1/tables
   -------------------
   CHANGED: Response now includes location details
   
   OLD RESPONSE:
   {
     "id": "table_123",
     "location": "Window Side"  // Simple string
   }
   
   NEW RESPONSE:
   {
     "id": "table_123",
     "location": "Window Side",      // ‚ö†Ô∏è KEPT for backward compatibility
     "locationId": "loc_window_456", // ‚úÖ NEW: Foreign key reference
     "locationDetails": {            // ‚úÖ NEW: Full location object
       "id": "loc_window_456",
       "name": "Window Side",
       "description": "Tables by windows with natural light",
       "isActive": true
     }
   }

2. POST /api/v1/tables
   --------------------
   CHANGED: Now accepts locationId parameter
   
   OLD REQUEST:
   {
     "number": "T1",
     "capacity": 4,
     "location": "Window Side"
   }
   
   NEW REQUEST (both formats supported):
   {
     "number": "T1", 
     "capacity": 4,
     "location": "Window Side",        // ‚ö†Ô∏è LEGACY: Still works
     "locationId": "loc_window_456"    // ‚úÖ NEW: Preferred method
   }
   
   Response: Same enhanced format as GET

3. PUT /api/v1/tables/:id
   -----------------------
   CHANGED: Now accepts locationId parameter
   
   Request: Same as POST (both location and locationId supported)
   Response: Same enhanced format as GET

4. GET /api/v1/public/tables
   --------------------------
   CHANGED: Public endpoint now includes location details
   
   Response: Same enhanced format as authenticated GET endpoint

===========================================================================

üîÑ BACKWARD COMPATIBILITY
==========================

‚úÖ SAFE TRANSITION: All existing code continues to work
‚úÖ LEGACY SUPPORT: Old "location" field still present in responses
‚úÖ MIGRATION SAFE: Existing tables automatically linked to locations
‚úÖ GRADUAL ADOPTION: Can migrate frontend piece by piece

RECOMMENDATION: Start using locationId and locationDetails in new code,
but old location field will continue to work during transition.

===========================================================================

üé® FRONTEND INTEGRATION EXAMPLES
=================================

1. LOCATION MANAGEMENT COMPONENT
   ------------------------------
   // Fetch all locations
   const locations = await fetch('/api/v1/locations').then(r => r.json());
   
   // Create new location  
   await fetch('/api/v1/locations', {
     method: 'POST',
     headers: { 'Content-Type': 'application/json' },
     body: JSON.stringify({
       name: 'Patio',
       description: 'Outdoor seating area'
     })
   });

2. TABLE CREATION WITH LOCATION
   -----------------------------
   // Create table with new location system
   await fetch('/api/v1/tables', {
     method: 'POST', 
     headers: { 'Content-Type': 'application/json' },
     body: JSON.stringify({
       number: 'T5',
       capacity: 6,
       locationId: 'loc_patio_789'  // Use location ID
     })
   });

3. DISPLAYING TABLES WITH LOCATION DETAILS
   ----------------------------------------
   const tables = await fetch('/api/v1/tables').then(r => r.json());
   
   tables.data.tables.forEach(table => {
     console.log(`Table ${table.number}:`);
     
     // Option 1: Use enhanced location details
     if (table.locationDetails) {
       console.log(`  Location: ${table.locationDetails.name}`);
       console.log(`  Description: ${table.locationDetails.description}`);
     }
     
     // Option 2: Fallback to legacy field
     else if (table.location) {
       console.log(`  Location: ${table.location}`);
     }
   });

4. LOCATION DROPDOWN FOR TABLE FORMS
   -----------------------------------
   // Populate location dropdown
   const locations = await fetch('/api/v1/locations').then(r => r.json());
   
   const locationOptions = locations.data.locations
     .filter(loc => loc.isActive)
     .map(loc => ({
       value: loc.id,
       label: loc.name,
       description: loc.description
     }));

===========================================================================

‚ö†Ô∏è BREAKING CHANGES (NONE!)
============================

NO BREAKING CHANGES: All existing API calls continue to work exactly as before.
The only changes are ADDITIONS to response objects.

===========================================================================

üß™ TESTING RECOMMENDATIONS
===========================

1. Test location CRUD operations
2. Verify table creation with locationId
3. Confirm backward compatibility with existing table code
4. Test public tables endpoint changes
5. Verify location dropdown population
6. Test table updates with new location system

===========================================================================

üìã MIGRATION CHECKLIST FOR FRONTEND
====================================

Phase 1: Add Location Management
‚ñ° Create location management UI
‚ñ° Implement location CRUD operations
‚ñ° Add location dropdown to table forms

Phase 2: Update Table Components  
‚ñ° Update table listings to show locationDetails
‚ñ° Modify table creation to use locationId
‚ñ° Update table editing to use locationId

Phase 3: Enhanced Features
‚ñ° Add location-based table filtering
‚ñ° Implement location-based table grouping
‚ñ° Add location descriptions to UI

Phase 4: Cleanup (Optional)
‚ñ° Remove references to legacy location field
‚ñ° Update any hardcoded location strings

===========================================================================

üìû SUPPORT
===========

If you encounter any issues or need clarification:
1. Check the verification queries in phase1_locations_migration.sql
2. Test endpoints with curl/Postman first
3. Ensure all tables have locationId assigned
4. Verify locations were created correctly

Backend changes are fully tested and backward compatible! üöÄ
