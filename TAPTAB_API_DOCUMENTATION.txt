TAPTAB RESTAURANT MANAGEMENT API - COMPREHENSIVE DOCUMENTATION
================================================================

BASE URL: http://localhost:5000/api/v1
AUTHENTICATION: All protected routes require JWT token in Authorization header
FORMAT: Authorization: Bearer <jwt_token>

USER ROLES:
- SUPER_ADMIN: Full access
- TENANT_ADMIN: Full access to tenant
- MANAGER: Management operations
- CASHIER: Order and payment operations
- WAITER: Order operations
- KITCHEN: Kitchen operations
- READONLY: Read-only access

================================================================
1. AUTH ROUTES
================================================================

POST /api/v1/auth/verify
Purpose: Verify JWT token and get user info
Authentication: None (public endpoint)

Headers:
Content-Type: application/json

Request Body:
{
  "token": "your_jwt_token_here"
}

Success Response (200):
{
  "success": true,
  "data": {
    "user": {
      "id": "user_id",
      "email": "user@example.com",
      "firstName": "John",
      "lastName": "Doe",
      "role": "TENANT_ADMIN",
      "tenantId": "tenant_id",
      "tenant": {
        "id": "tenant_id",
        "name": "Restaurant Name",
        "slug": "restaurant-slug",
        "logo": "logo_url",
        "colors": {},
        "isActive": true
      }
    }
  },
  "timestamp": "2024-01-01T00:00:00.000Z"
}

Error Responses:
400 - TOKEN_REQUIRED: Token is required
401 - TOKEN_EXPIRED: Token expired
401 - INVALID_TOKEN: Invalid token
401 - TENANT_NOT_FOUND: Tenant not found or inactive

================================================================
2. MENU ROUTES
================================================================

GET /api/v1/menu/items
Purpose: Get all menu items
Authentication: JWT token required
Role: Any authenticated user

Headers:
Authorization: Bearer <jwt_token>

Query Parameters:
- category (optional): Filter by category ID

Success Response (200):
{
  "success": true,
  "data": {
    "items": [
      {
        "id": "item_id",
        "name": "Burger",
        "description": "Beef burger with fries",
        "price": 12.99,
        "category": "Main Course",
        "categoryId": "category_id",
        "image": "image_url",
        "isActive": true,
        "createdAt": "2024-01-01T00:00:00.000Z",
        "updatedAt": "2024-01-01T00:00:00.000Z"
      }
    ]
  }
}

POST /api/v1/menu/items
Purpose: Create new menu item
Authentication: JWT token required
Role: TENANT_ADMIN, MANAGER

Headers:
Authorization: Bearer <jwt_token>
Content-Type: application/json

Request Body:
{
  "name": "Burger",
  "description": "Beef burger with fries",
  "price": 12.99,
  "categoryId": "category_id",
  "image": "image_url"
}

Success Response (201):
{
  "success": true,
  "data": {
    "item": {
      "id": "item_id",
      "name": "Burger",
      "description": "Beef burger with fries",
      "price": 12.99,
      "category": "Main Course",
      "categoryId": "category_id",
      "image": "image_url",
      "isActive": true,
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z"
    }
  },
  "message": "Menu item created successfully"
}

PUT /api/v1/menu/items/:id
Purpose: Update menu item
Authentication: JWT token required
Role: TENANT_ADMIN, MANAGER

Headers:
Authorization: Bearer <jwt_token>
Content-Type: application/json

Request Body:
{
  "name": "Updated Burger",
  "description": "Updated description",
  "price": 15.99,
  "categoryId": "category_id",
  "image": "new_image_url",
  "isActive": true
}

Success Response (200):
{
  "success": true,
  "data": {
    "item": {
      "id": "item_id",
      "name": "Updated Burger",
      "description": "Updated description",
      "price": 15.99,
      "category": "Main Course",
      "categoryId": "category_id",
      "image": "new_image_url",
      "isActive": true,
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z"
    }
  },
  "message": "Menu item updated successfully"
}

DELETE /api/v1/menu/items/:id
Purpose: Delete menu item
Authentication: JWT token required
Role: TENANT_ADMIN, MANAGER

Headers:
Authorization: Bearer <jwt_token>

Success Response (200):
{
  "success": true,
  "data": {
    "success": true
  },
  "message": "Menu item deleted successfully"
}

GET /api/v1/menu/categories
Purpose: Get all menu categories
Authentication: JWT token required
Role: Any authenticated user

Headers:
Authorization: Bearer <jwt_token>

Success Response (200):
{
  "success": true,
  "data": {
    "categories": [
      {
        "id": "category_id",
        "name": "Appetizers",
        "description": "Starters and small plates",
        "createdAt": "2024-01-01T00:00:00.000Z"
      }
    ]
  }
}

POST /api/v1/menu/categories
Purpose: Create new category
Authentication: JWT token required
Role: TENANT_ADMIN, MANAGER

Headers:
Authorization: Bearer <jwt_token>
Content-Type: application/json

Request Body:
{
  "name": "Appetizers",
  "description": "Starters and small plates"
}

Success Response (201):
{
  "success": true,
  "data": {
    "category": {
      "id": "category_id",
      "name": "Appetizers",
      "description": "Starters and small plates",
      "createdAt": "2024-01-01T00:00:00.000Z"
    }
  },
  "message": "Category created successfully"
}

================================================================
3. ORDERS ROUTES
================================================================

GET /api/v1/orders
Purpose: Get all orders
Authentication: JWT token required
Role: Any authenticated user

Headers:
Authorization: Bearer <jwt_token>

Query Parameters:
- status (optional): Filter by status (pending, preparing, ready, served, cancelled)
- tableId (optional): Filter by table number

Success Response (200):
{
  "success": true,
  "data": {
    "orders": [
      {
        "id": "order_id",
        "tableId": "table_number",
        "tableNumber": "table_number",
        "items": [
          {
            "id": "item_id",
            "menuItemId": "menu_item_id",
            "menuItemName": "Burger",
            "quantity": 2,
            "price": 12.99,
            "notes": "Extra cheese",
            "status": "pending"
          }
        ],
        "total": 25.98,
        "status": "pending",
        "waiterId": "waiter_id",
        "waiterName": "Unknown",
        "createdAt": "2024-01-01T00:00:00.000Z",
        "updatedAt": "2024-01-01T00:00:00.000Z"
      }
    ]
  }
}

POST /api/v1/orders
Purpose: Create new order
Authentication: JWT token required
Role: WAITER, CASHIER, MANAGER, TENANT_ADMIN

Headers:
Authorization: Bearer <jwt_token>
Content-Type: application/json

Request Body:
{
  "tableId": "table_number",
  "items": [
    {
      "menuItemId": "menu_item_id",
      "quantity": 2,
      "notes": "Extra cheese"
    }
  ]
}

Success Response (201):
{
  "success": true,
  "data": {
    "order": {
      "id": "order_id",
      "tableId": "table_number",
      "tableNumber": "table_number",
      "items": [
        {
          "id": "item_id",
          "menuItemId": "menu_item_id",
          "menuItemName": "Burger",
          "quantity": 2,
          "price": 12.99,
          "notes": "Extra cheese",
          "status": "pending"
        }
      ],
      "total": 25.98,
      "status": "pending",
      "waiterId": "waiter_id",
      "waiterName": "Unknown",
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z"
    }
  },
  "message": "Order created successfully"
}

PUT /api/v1/orders/:id
Purpose: Update order status
Authentication: JWT token required
Role: WAITER, CASHIER, MANAGER, TENANT_ADMIN

Headers:
Authorization: Bearer <jwt_token>
Content-Type: application/json

Request Body:
{
  "status": "preparing"
}

Success Response (200):
{
  "success": true,
  "data": {
    "order": {
      "id": "order_id",
      "tableId": "table_number",
      "tableNumber": "table_number",
      "items": [...],
      "total": 25.98,
      "status": "preparing",
      "waiterId": "waiter_id",
      "waiterName": "Unknown",
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z"
    }
  },
  "message": "Order status updated successfully"
}

PUT /api/v1/orders/:id/items/:itemId
Purpose: Update specific item status
Authentication: JWT token required
Role: KITCHEN, MANAGER, TENANT_ADMIN

Headers:
Authorization: Bearer <jwt_token>
Content-Type: application/json

Request Body:
{
  "status": "ready"
}

Success Response (200):
{
  "success": true,
  "data": {
    "item": {
      "id": "item_id",
      "menuItemId": "menu_item_id",
      "menuItemName": "Burger",
      "quantity": 2,
      "price": 12.99,
      "notes": "Extra cheese",
      "status": "ready"
    }
  },
  "message": "Order item status updated successfully"
}

DELETE /api/v1/orders/:id
Purpose: Cancel order
Authentication: JWT token required
Role: WAITER, CASHIER, MANAGER, TENANT_ADMIN

Headers:
Authorization: Bearer <jwt_token>

Success Response (200):
{
  "success": true,
  "data": {
    "success": true
  },
  "message": "Order cancelled successfully"
}

================================================================
4. TABLES ROUTES
================================================================

GET /api/v1/tables
Purpose: Get all tables
Authentication: JWT token required
Role: Any authenticated user

Headers:
Authorization: Bearer <jwt_token>

Success Response (200):
{
  "success": true,
  "data": {
    "tables": [
      {
        "id": "table_number",
        "number": "table_number",
        "capacity": 4,
        "status": "available",
        "location": "",
        "currentOrderId": null,
        "createdAt": "2024-01-01T00:00:00.000Z"
      }
    ]
  }
}

POST /api/v1/tables
Purpose: Create new table
Authentication: JWT token required
Role: TENANT_ADMIN, MANAGER

Headers:
Authorization: Bearer <jwt_token>
Content-Type: application/json

Request Body:
{
  "number": "table_number",
  "capacity": 4,
  "location": "Main floor"
}

Success Response (201):
{
  "success": true,
  "data": {
    "table": {
      "id": "table_number",
      "number": "table_number",
      "capacity": 4,
      "status": "available",
      "location": "Main floor",
      "currentOrderId": null,
      "createdAt": "2024-01-01T00:00:00.000Z"
    }
  },
  "message": "Table created successfully"
}

PUT /api/v1/tables/:id
Purpose: Update table (NOT IMPLEMENTED - tables derived from orders)
Authentication: JWT token required
Role: TENANT_ADMIN, MANAGER

Headers:
Authorization: Bearer <jwt_token>
Content-Type: application/json

Request Body:
{
  "number": "new_table_number",
  "capacity": 6,
  "status": "occupied",
  "location": "New location"
}

Error Response (501):
{
  "success": false,
  "error": {
    "code": "NOT_IMPLEMENTED",
    "message": "Table updates not supported - tables are derived from orders"
  },
  "timestamp": "2024-01-01T00:00:00.000Z"
}

DELETE /api/v1/tables/:id
Purpose: Delete table (NOT IMPLEMENTED - tables derived from orders)
Authentication: JWT token required
Role: TENANT_ADMIN, MANAGER

Headers:
Authorization: Bearer <jwt_token>

Error Response (501):
{
  "success": false,
  "error": {
    "code": "NOT_IMPLEMENTED",
    "message": "Table deletion not supported - tables are derived from orders"
  },
  "timestamp": "2024-01-01T00:00:00.000Z"
}

PUT /api/v1/tables/:id/status
Purpose: Update table status (NOT IMPLEMENTED - tables derived from orders)
Authentication: JWT token required
Role: WAITER, MANAGER, TENANT_ADMIN

Headers:
Authorization: Bearer <jwt_token>
Content-Type: application/json

Request Body:
{
  "status": "occupied"
}

Error Response (501):
{
  "success": false,
  "error": {
    "code": "NOT_IMPLEMENTED",
    "message": "Table status updates not supported - tables are derived from orders"
  },
  "timestamp": "2024-01-01T00:00:00.000Z"
}

================================================================
5. ANALYTICS ROUTES
================================================================

GET /api/v1/analytics/sales
Purpose: Get sales analytics
Authentication: JWT token required
Role: TENANT_ADMIN, MANAGER

Headers:
Authorization: Bearer <jwt_token>

Query Parameters:
- startDate (optional): Start date (YYYY-MM-DD)
- endDate (optional): End date (YYYY-MM-DD)

Success Response (200):
{
  "success": true,
  "data": {
    "totalSales": 1250.50,
    "totalOrders": 45,
    "averageOrderValue": 27.79,
    "topItems": [
      {
        "menuItemId": "item_id",
        "name": "Burger",
        "quantity": 25,
        "revenue": 324.75
      }
    ],
    "dailySales": [
      {
        "date": "2024-01-01",
        "sales": 250.00,
        "orders": 8
      }
    ]
  }
}

GET /api/v1/analytics/orders
Purpose: Get order analytics
Authentication: JWT token required
Role: TENANT_ADMIN, MANAGER

Headers:
Authorization: Bearer <jwt_token>

Success Response (200):
{
  "success": true,
  "data": {
    "pendingOrders": 5,
    "preparingOrders": 3,
    "readyOrders": 2,
    "completedOrders": 15
  }
}

================================================================
6. SETTINGS ROUTES
================================================================

GET /api/v1/settings
Purpose: Get restaurant settings
Authentication: JWT token required
Role: TENANT_ADMIN

Headers:
Authorization: Bearer <jwt_token>

Success Response (200):
{
  "success": true,
  "data": {
    "restaurantName": "My Restaurant",
    "address": "123 Main St",
    "phone": "+1234567890",
    "email": "info@restaurant.com",
    "taxRate": 8.5,
    "currency": "USD",
    "timezone": "UTC"
  }
}

PUT /api/v1/settings
Purpose: Update restaurant settings
Authentication: JWT token required
Role: TENANT_ADMIN

Headers:
Authorization: Bearer <jwt_token>
Content-Type: application/json

Request Body:
{
  "restaurantName": "Updated Restaurant Name",
  "address": "456 New St",
  "phone": "+1987654321",
  "email": "new@restaurant.com",
  "taxRate": 9.0,
  "currency": "USD",
  "timezone": "America/New_York"
}

Success Response (200):
{
  "success": true,
  "data": {
    "settings": {
      "restaurantName": "Updated Restaurant Name",
      "address": "456 New St",
      "phone": "+1987654321",
      "email": "new@restaurant.com",
      "taxRate": 9.0,
      "currency": "USD",
      "timezone": "America/New_York"
    }
  },
  "message": "Settings updated successfully"
}

================================================================
ERROR RESPONSES
================================================================

All endpoints return consistent error responses:

400 Bad Request:
{
  "success": false,
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Validation error message"
  },
  "timestamp": "2024-01-01T00:00:00.000Z"
}

401 Unauthorized:
{
  "success": false,
  "error": {
    "code": "INVALID_TOKEN",
    "message": "Invalid or missing token"
  },
  "timestamp": "2024-01-01T00:00:00.000Z"
}

403 Forbidden:
{
  "success": false,
  "error": {
    "code": "INSUFFICIENT_PERMISSIONS",
    "message": "Insufficient permissions"
  },
  "timestamp": "2024-01-01T00:00:00.000Z"
}

404 Not Found:
{
  "success": false,
  "error": {
    "code": "NOT_FOUND",
    "message": "Resource not found"
  },
  "timestamp": "2024-01-01T00:00:00.000Z"
}

500 Internal Server Error:
{
  "success": false,
  "error": {
    "code": "INTERNAL_ERROR",
    "message": "Internal server error"
  },
  "timestamp": "2024-01-01T00:00:00.000Z"
}

501 Not Implemented:
{
  "success": false,
  "error": {
    "code": "NOT_IMPLEMENTED",
    "message": "Feature not implemented"
  },
  "timestamp": "2024-01-01T00:00:00.000Z"
}

================================================================
HEALTH CHECK
================================================================

GET /health
Purpose: Check server health
Authentication: None (public endpoint)

Success Response (200):
{
  "success": true,
  "data": {
    "status": "OK",
    "timestamp": "2024-01-01T00:00:00.000Z",
    "uptime": 123.456,
    "environment": "development",
    "version": "1.0.0"
  },
  "message": "Service is healthy",
  "timestamp": "2024-01-01T00:00:00.000Z"
}

================================================================
METRICS
================================================================

GET /metrics
Purpose: Get Prometheus metrics
Authentication: None (public endpoint)

Returns Prometheus format metrics for monitoring.

================================================================
END OF DOCUMENTATION
================================================================ 